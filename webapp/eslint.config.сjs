const baseConfig = require('../eslint.config.cjs')
const nodePlugin = require('eslint-plugin-node')

/** @type {import('eslint').Linter.FlatConfig[]} */
module.exports = [
  ...baseConfig,
  {
    plugins: {
      node: nodePlugin,
    },
  },
  {
    rules: {
      'node/no-process-env': 'error',
      'no-restricted-syntax': [
        'error',
        {
          selector: '[type=MetaProperty][property.name=env]',
          message: 'Use instead import {env} from "lib/env"',
        },
      ],
    },
  },
  {
    files: ['**/*.{ts,tsx,js,jsx}'],
    languageOptions: {
      parserOptions: {
        project: ['tsconfig.json', 'tsconfig.node.json', 'tsconfig.app.json'],
      },
    },
    settings: {
      react: {
        version: 'detect',
      },
    },
    rules: {
      'react/react-in-jsx-scope': 'off',
      '@typescript-eslint/consistent-type-imports': [
        'error',
        { prefer: 'type-imports', disallowTypeAnnotations: false },
      ],
      '@typescript-eslint/no-restricted-imports': [
        'error',
        {
          patterns: [
            {
              group: [
                '@make-ideas/backend/**',
                '!@make-ideas/backend/**/input',
                '!@make-ideas/backend/src/utils/can',
                '!@make-ideas/backend/src/router/types',
              ],
              message: 'Импорт из бэкенда запрещён, кроме файлов input, can и types',
            },
          ],
        },
      ],
    },
  },
  {
    ignores: ['dist', 'node_modules', 'coverage', 'eslint.config.js'],
  },
  {
    files: ['./vite.config.ts'],
    languageOptions: {
      parserOptions: {
        project: ['tsconfig.json', 'tsconfig.node.json', 'tsconfig.app.json'],
      },
    },
  },
]
